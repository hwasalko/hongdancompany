<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- DB 커넥션(mysql) -->
	<!-- 스프링 연동 방식
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
	        <property name="url" value="jdbc:mysql://hongdan.cxyjhvqjj1go.ap-northeast-2.rds.amazonaws.com:3306/hongdancompany" />
	        <property name="username" value="test" />
	        <property name="password" value="test" />
	</bean>
	 -->
	<!-- WAS(톰캣) DB pooling 방식 -->	
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
	    <property name="jndiName" value="jdbc/hongdandb"/>
	    <property name="resourceRef" value="true" />
	</bean>

	
	 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	        <property name="dataSource" ref="dataSource" />
	        <property name="mapperLocations" value="classpath*:query/**" />
	 </bean>
	 
	 <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	        <constructor-arg ref="sqlSessionFactory" />
	 </bean>
	 
	 <!-- 파일 등록처리 -->
	 <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	 	<property name="defaultEncoding" value="UTF-8" />
  		<property name="maxUploadSize" value="10485760" />
	 </bean>
	 
	 
	 <!-- 트랜젝션 -->
	 <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	       <property name="dataSource" ref="dataSource"/>
	</bean>
	     
	<aop:config proxy-target-class="true">
	    <aop:pointcut id="serviceOperation" expression="execution(public * com.spring..service.*Service.*(..))" />
	    <aop:advisor id="transactionAdvisor" pointcut-ref="serviceOperation" advice-ref="txAdvice"/>
	</aop:config>
	         
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	    <tx:attributes>
	    	<!-- 아래 패턴의 호출 시 트랜젝션 설정 -->
	        <tx:method name="insert*" rollback-for="Exception"/>
	        <tx:method name="update*" rollback-for="Exception"/>
	        <tx:method name="delete*" rollback-for="Exception"/>
	    </tx:attributes>
	</tx:advice>
	 
		
</beans>
